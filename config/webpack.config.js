/* eslint-disable */
const path = require("path")
const chalk = require("chalk")
const autoprefixer = require("autoprefixer")
const DotenvWebpack = require("dotenv-webpack")
const ExtractCssChunks = require("extract-css-chunks-webpack-plugin")
const TsconfigPathsPlugin = require("tsconfig-paths-webpack-plugin")
const webpack = require("webpack")
const HtmlWebpackPlugin = require('html-webpack-plugin')

const checkRequiredVars = require("./envCheck")
/* eslint-enable */

console.log(chalk.yellow("[webpack - client] building bundle.js")) // eslint-disable-line
checkRequiredVars(false)

const config = {
  entry: "./src/index.tsx",
  output: {
    filename: "bundle.js",
    chunkFilename: "[name].bundle.js",
    path: path.resolve(__dirname, "../public"),
  },
  mode: process.env.NODE_ENV,
  devtool: "inline-source-map",
  plugins: [
    new ExtractCssChunks({
      filename: "bundle.css",
      orderWarning: false,
      hot: true,
      reloadAll: true,
      cssModules: true,
    }),
    new webpack.WatchIgnorePlugin([
      /scss\.d\.ts$/
    ]),
    new DotenvWebpack(),
    new HtmlWebpackPlugin({
      template: path.resolve(__dirname, "../src/index.html"),
      filename: "index.html",
      inject: "body"
    })
  ],
  resolve: {
    extensions: [".ts", ".tsx", ".js", "jsx", ".json"],
    // This is what we use to manage module paths (instead of the node-modules package)
    plugins: [new TsconfigPathsPlugin()]
  },
  module: {
    rules: [
      {
        test: /\.[jt]sx?$/,
        exclude: /node_modules/,
        use: [{
          loader: "babel-loader",
          options: {
            comments: true,
            compact: false,
            plugins: ["@babel/plugin-syntax-dynamic-import"],
            presets: ["@babel/preset-env"]
          },
        }],
      },
      // Css modules
      {
        test: /\.css$/,
        exclude: /node_modules/,
        use: [
          { loader: ExtractCssChunks.loader },
          {
            loader: "@teamsupercell/typings-for-css-modules-loader",
            options: {
              banner:
                "// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!"
            }
          },
          {
            loader: "css-loader",
            options: {
              importLoaders: 1,
              localsConvention: "camelCase",
              modules: {
                localIdentName: "[name]__[local]___[hash:base64:8]",
              }
            }
          },
           {
            loader: "postcss-loader",
            options: {
              ident: "postcss",
              plugins: () => [
                autoprefixer()
              ]
            }
          }
        ],
      },
      // Scss / Sass modules directive
      {
        test: /\.(scss|sass)$/,
        exclude: /node_modules/,
        use: [
          { loader: ExtractCssChunks.loader },
          {
            loader: "@teamsupercell/typings-for-css-modules-loader",
            options: {
              banner:
                "// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!"
            }
          },
          {
            loader: "css-loader",
            options: {
              importLoaders: 2,
              localsConvention: "camelCase",
              modules: {
                localIdentName: "[name]__[local]___[hash:base64:8]",
              }
            }
          },
          {
            loader: "postcss-loader",
            options: {
              ident: "postcss",
              plugins: () => [
                autoprefixer()
              ]
            }
          },
          {
            loader: "sass-loader",
            options: {
              sassOptions: {
                // This allow us to use @import statement in sccs files without the "../../.." syntax
                includePaths: [path.resolve(__dirname, "../src/styles/css")]
              }
            }
          }
        ],
      },
      // File loaders
      {
        test: /\.(png|jpg|gif)$/,
        use: [{
          loader: "file-loader",
          options: {
            name: "[name].[ext]",
            outputPath: "static/assets/image",
            publicPath: "static/assets/image",
          },
        }],
      },
      {
        test: /\.(svg)$/,
        use: [{
          loader: "file-loader",
          options: {
            name: "[name].[ext]",
            outputPath: "static/assets/svg",
            publicPath: "static/assets/svg",
          },
        }],
      },
      {
        test: /\.(mp4|webm)$/,
        use: [{
          loader: "file-loader",
          options: {
            name: "[name].[ext]",
            outputPath: "static/assets/video",
            publicPath: "static/assets/video",
          },
        }],
      },
      {
        test: /\.(ttf|eot|woff|woff2|otf)$/,
        use: [{
          loader: "file-loader",
          options: {
            name: "[name].[ext]",
            outputPath: "static/fonts/",
            publicPath: "static/fonts/",
          },
        }],
      },
    ]
  },
}

module.exports = config
